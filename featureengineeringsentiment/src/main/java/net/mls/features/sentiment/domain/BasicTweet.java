/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package net.mls.features.sentiment.domain;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class BasicTweet extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 5451942836285871937L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"BasicTweet\",\"namespace\":\"net.mls.pipeline.data.avro\",\"fields\":[{\"name\":\"id\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"date\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"tweet\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"sentiment\",\"type\":[\"null\",\"string\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<BasicTweet> ENCODER =
      new BinaryMessageEncoder<BasicTweet>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<BasicTweet> DECODER =
      new BinaryMessageDecoder<BasicTweet>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<BasicTweet> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<BasicTweet> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<BasicTweet>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this BasicTweet to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a BasicTweet from a ByteBuffer. */
  public static BasicTweet fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public CharSequence id;
  @Deprecated public CharSequence date;
  @Deprecated public CharSequence tweet;
  @Deprecated public CharSequence sentiment;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public BasicTweet() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param date The new value for date
   * @param tweet The new value for tweet
   * @param sentiment The new value for sentiment
   */
  public BasicTweet(CharSequence id, CharSequence date, CharSequence tweet, CharSequence sentiment) {
    this.id = id;
    this.date = date;
    this.tweet = tweet;
    this.sentiment = sentiment;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return date;
    case 2: return tweet;
    case 3: return sentiment;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: id = (CharSequence)value$; break;
    case 1: date = (CharSequence)value$; break;
    case 2: tweet = (CharSequence)value$; break;
    case 3: sentiment = (CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public CharSequence getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(CharSequence value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'date' field.
   * @return The value of the 'date' field.
   */
  public CharSequence getDate() {
    return date;
  }

  /**
   * Sets the value of the 'date' field.
   * @param value the value to set.
   */
  public void setDate(CharSequence value) {
    this.date = value;
  }

  /**
   * Gets the value of the 'tweet' field.
   * @return The value of the 'tweet' field.
   */
  public CharSequence getTweet() {
    return tweet;
  }

  /**
   * Sets the value of the 'tweet' field.
   * @param value the value to set.
   */
  public void setTweet(CharSequence value) {
    this.tweet = value;
  }

  /**
   * Gets the value of the 'sentiment' field.
   * @return The value of the 'sentiment' field.
   */
  public CharSequence getSentiment() {
    return sentiment;
  }

  /**
   * Sets the value of the 'sentiment' field.
   * @param value the value to set.
   */
  public void setSentiment(CharSequence value) {
    this.sentiment = value;
  }

  /**
   * Creates a new BasicTweet RecordBuilder.
   * @return A new BasicTweet RecordBuilder
   */
  public static BasicTweet.Builder newBuilder() {
    return new BasicTweet.Builder();
  }

  /**
   * Creates a new BasicTweet RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new BasicTweet RecordBuilder
   */
  public static BasicTweet.Builder newBuilder(BasicTweet.Builder other) {
    return new BasicTweet.Builder(other);
  }

  /**
   * Creates a new BasicTweet RecordBuilder by copying an existing BasicTweet instance.
   * @param other The existing instance to copy.
   * @return A new BasicTweet RecordBuilder
   */
  public static BasicTweet.Builder newBuilder(BasicTweet other) {
    return new BasicTweet.Builder(other);
  }

  /**
   * RecordBuilder for BasicTweet instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<BasicTweet>
    implements org.apache.avro.data.RecordBuilder<BasicTweet> {

    private CharSequence id;
    private CharSequence date;
    private CharSequence tweet;
    private CharSequence sentiment;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(BasicTweet.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.date)) {
        this.date = data().deepCopy(fields()[1].schema(), other.date);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.tweet)) {
        this.tweet = data().deepCopy(fields()[2].schema(), other.tweet);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.sentiment)) {
        this.sentiment = data().deepCopy(fields()[3].schema(), other.sentiment);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing BasicTweet instance
     * @param other The existing instance to copy.
     */
    private Builder(BasicTweet other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.date)) {
        this.date = data().deepCopy(fields()[1].schema(), other.date);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.tweet)) {
        this.tweet = data().deepCopy(fields()[2].schema(), other.tweet);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.sentiment)) {
        this.sentiment = data().deepCopy(fields()[3].schema(), other.sentiment);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public CharSequence getId() {
      return id;
    }

    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public BasicTweet.Builder setId(CharSequence value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public BasicTweet.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'date' field.
      * @return The value.
      */
    public CharSequence getDate() {
      return date;
    }

    /**
      * Sets the value of the 'date' field.
      * @param value The value of 'date'.
      * @return This builder.
      */
    public BasicTweet.Builder setDate(CharSequence value) {
      validate(fields()[1], value);
      this.date = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'date' field has been set.
      * @return True if the 'date' field has been set, false otherwise.
      */
    public boolean hasDate() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'date' field.
      * @return This builder.
      */
    public BasicTweet.Builder clearDate() {
      date = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'tweet' field.
      * @return The value.
      */
    public CharSequence getTweet() {
      return tweet;
    }

    /**
      * Sets the value of the 'tweet' field.
      * @param value The value of 'tweet'.
      * @return This builder.
      */
    public BasicTweet.Builder setTweet(CharSequence value) {
      validate(fields()[2], value);
      this.tweet = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'tweet' field has been set.
      * @return True if the 'tweet' field has been set, false otherwise.
      */
    public boolean hasTweet() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'tweet' field.
      * @return This builder.
      */
    public BasicTweet.Builder clearTweet() {
      tweet = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'sentiment' field.
      * @return The value.
      */
    public CharSequence getSentiment() {
      return sentiment;
    }

    /**
      * Sets the value of the 'sentiment' field.
      * @param value The value of 'sentiment'.
      * @return This builder.
      */
    public BasicTweet.Builder setSentiment(CharSequence value) {
      validate(fields()[3], value);
      this.sentiment = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'sentiment' field has been set.
      * @return True if the 'sentiment' field has been set, false otherwise.
      */
    public boolean hasSentiment() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'sentiment' field.
      * @return This builder.
      */
    public BasicTweet.Builder clearSentiment() {
      sentiment = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public BasicTweet build() {
      try {
        BasicTweet record = new BasicTweet();
        record.id = fieldSetFlags()[0] ? this.id : (CharSequence) defaultValue(fields()[0]);
        record.date = fieldSetFlags()[1] ? this.date : (CharSequence) defaultValue(fields()[1]);
        record.tweet = fieldSetFlags()[2] ? this.tweet : (CharSequence) defaultValue(fields()[2]);
        record.sentiment = fieldSetFlags()[3] ? this.sentiment : (CharSequence) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<BasicTweet>
    WRITER$ = (org.apache.avro.io.DatumWriter<BasicTweet>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<BasicTweet>
    READER$ = (org.apache.avro.io.DatumReader<BasicTweet>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
