/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package net.mls.pipeline.common.avro;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class BasicData extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -4105883637803167831L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"BasicData\",\"namespace\":\"net.mls.pipeline.data.avro\",\"fields\":[{\"name\":\"text\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"date\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"sentiment\",\"type\":[\"null\",\"string\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<BasicData> ENCODER =
      new BinaryMessageEncoder<BasicData>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<BasicData> DECODER =
      new BinaryMessageDecoder<BasicData>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<BasicData> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<BasicData> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<BasicData>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this BasicData to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a BasicData from a ByteBuffer. */
  public static BasicData fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence text;
  @Deprecated public java.lang.CharSequence date;
  @Deprecated public java.lang.CharSequence sentiment;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public BasicData() {}

  /**
   * All-args constructor.
   * @param text The new value for text
   * @param date The new value for date
   * @param sentiment The new value for sentiment
   */
  public BasicData(java.lang.CharSequence text, java.lang.CharSequence date, java.lang.CharSequence sentiment) {
    this.text = text;
    this.date = date;
    this.sentiment = sentiment;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return text;
    case 1: return date;
    case 2: return sentiment;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: text = (java.lang.CharSequence)value$; break;
    case 1: date = (java.lang.CharSequence)value$; break;
    case 2: sentiment = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'text' field.
   * @return The value of the 'text' field.
   */
  public java.lang.CharSequence getText() {
    return text;
  }

  /**
   * Sets the value of the 'text' field.
   * @param value the value to set.
   */
  public void setText(java.lang.CharSequence value) {
    this.text = value;
  }

  /**
   * Gets the value of the 'date' field.
   * @return The value of the 'date' field.
   */
  public java.lang.CharSequence getDate() {
    return date;
  }

  /**
   * Sets the value of the 'date' field.
   * @param value the value to set.
   */
  public void setDate(java.lang.CharSequence value) {
    this.date = value;
  }

  /**
   * Gets the value of the 'sentiment' field.
   * @return The value of the 'sentiment' field.
   */
  public java.lang.CharSequence getSentiment() {
    return sentiment;
  }

  /**
   * Sets the value of the 'sentiment' field.
   * @param value the value to set.
   */
  public void setSentiment(java.lang.CharSequence value) {
    this.sentiment = value;
  }

  /**
   * Creates a new BasicData RecordBuilder.
   * @return A new BasicData RecordBuilder
   */
  public static BasicData.Builder newBuilder() {
    return new BasicData.Builder();
  }

  /**
   * Creates a new BasicData RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new BasicData RecordBuilder
   */
  public static BasicData.Builder newBuilder(BasicData.Builder other) {
    return new BasicData.Builder(other);
  }

  /**
   * Creates a new BasicData RecordBuilder by copying an existing BasicData instance.
   * @param other The existing instance to copy.
   * @return A new BasicData RecordBuilder
   */
  public static BasicData.Builder newBuilder(BasicData other) {
    return new BasicData.Builder(other);
  }

  /**
   * RecordBuilder for BasicData instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<BasicData>
    implements org.apache.avro.data.RecordBuilder<BasicData> {

    private java.lang.CharSequence text;
    private java.lang.CharSequence date;
    private java.lang.CharSequence sentiment;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(BasicData.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.text)) {
        this.text = data().deepCopy(fields()[0].schema(), other.text);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.date)) {
        this.date = data().deepCopy(fields()[1].schema(), other.date);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.sentiment)) {
        this.sentiment = data().deepCopy(fields()[2].schema(), other.sentiment);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing BasicData instance
     * @param other The existing instance to copy.
     */
    private Builder(BasicData other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.text)) {
        this.text = data().deepCopy(fields()[0].schema(), other.text);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.date)) {
        this.date = data().deepCopy(fields()[1].schema(), other.date);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.sentiment)) {
        this.sentiment = data().deepCopy(fields()[2].schema(), other.sentiment);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'text' field.
      * @return The value.
      */
    public java.lang.CharSequence getText() {
      return text;
    }

    /**
      * Sets the value of the 'text' field.
      * @param value The value of 'text'.
      * @return This builder.
      */
    public BasicData.Builder setText(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.text = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'text' field has been set.
      * @return True if the 'text' field has been set, false otherwise.
      */
    public boolean hasText() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'text' field.
      * @return This builder.
      */
    public BasicData.Builder clearText() {
      text = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'date' field.
      * @return The value.
      */
    public java.lang.CharSequence getDate() {
      return date;
    }

    /**
      * Sets the value of the 'date' field.
      * @param value The value of 'date'.
      * @return This builder.
      */
    public BasicData.Builder setDate(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.date = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'date' field has been set.
      * @return True if the 'date' field has been set, false otherwise.
      */
    public boolean hasDate() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'date' field.
      * @return This builder.
      */
    public BasicData.Builder clearDate() {
      date = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'sentiment' field.
      * @return The value.
      */
    public java.lang.CharSequence getSentiment() {
      return sentiment;
    }

    /**
      * Sets the value of the 'sentiment' field.
      * @param value The value of 'sentiment'.
      * @return This builder.
      */
    public BasicData.Builder setSentiment(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.sentiment = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'sentiment' field has been set.
      * @return True if the 'sentiment' field has been set, false otherwise.
      */
    public boolean hasSentiment() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'sentiment' field.
      * @return This builder.
      */
    public BasicData.Builder clearSentiment() {
      sentiment = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public BasicData build() {
      try {
        BasicData record = new BasicData();
        record.text = fieldSetFlags()[0] ? this.text : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.date = fieldSetFlags()[1] ? this.date : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.sentiment = fieldSetFlags()[2] ? this.sentiment : (java.lang.CharSequence) defaultValue(fields()[2]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<BasicData>
    WRITER$ = (org.apache.avro.io.DatumWriter<BasicData>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<BasicData>
    READER$ = (org.apache.avro.io.DatumReader<BasicData>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
