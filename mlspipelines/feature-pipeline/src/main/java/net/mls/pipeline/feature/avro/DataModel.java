/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package net.mls.pipeline.feature.avro;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class DataModel extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -1962821261435126396L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"DataModel\",\"namespace\":\"net.mls.pipeline.data.avro\",\"fields\":[{\"name\":\"text\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"afterRelease\",\"type\":[\"null\",\"boolean\"],\"default\":null},{\"name\":\"version\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"label\",\"type\":[\"null\",\"int\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<DataModel> ENCODER =
      new BinaryMessageEncoder<DataModel>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<DataModel> DECODER =
      new BinaryMessageDecoder<DataModel>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<DataModel> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<DataModel> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<DataModel>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this DataModel to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a DataModel from a ByteBuffer. */
  public static DataModel fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence text;
  @Deprecated public java.lang.Boolean afterRelease;
  @Deprecated public java.lang.CharSequence version;
  @Deprecated public java.lang.Integer label;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public DataModel() {}

  /**
   * All-args constructor.
   * @param text The new value for text
   * @param afterRelease The new value for afterRelease
   * @param version The new value for version
   * @param label The new value for label
   */
  public DataModel(java.lang.CharSequence text, java.lang.Boolean afterRelease, java.lang.CharSequence version, java.lang.Integer label) {
    this.text = text;
    this.afterRelease = afterRelease;
    this.version = version;
    this.label = label;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return text;
    case 1: return afterRelease;
    case 2: return version;
    case 3: return label;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: text = (java.lang.CharSequence)value$; break;
    case 1: afterRelease = (java.lang.Boolean)value$; break;
    case 2: version = (java.lang.CharSequence)value$; break;
    case 3: label = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'text' field.
   * @return The value of the 'text' field.
   */
  public java.lang.CharSequence getText() {
    return text;
  }

  /**
   * Sets the value of the 'text' field.
   * @param value the value to set.
   */
  public void setText(java.lang.CharSequence value) {
    this.text = value;
  }

  /**
   * Gets the value of the 'afterRelease' field.
   * @return The value of the 'afterRelease' field.
   */
  public java.lang.Boolean getAfterRelease() {
    return afterRelease;
  }

  /**
   * Sets the value of the 'afterRelease' field.
   * @param value the value to set.
   */
  public void setAfterRelease(java.lang.Boolean value) {
    this.afterRelease = value;
  }

  /**
   * Gets the value of the 'version' field.
   * @return The value of the 'version' field.
   */
  public java.lang.CharSequence getVersion() {
    return version;
  }

  /**
   * Sets the value of the 'version' field.
   * @param value the value to set.
   */
  public void setVersion(java.lang.CharSequence value) {
    this.version = value;
  }

  /**
   * Gets the value of the 'label' field.
   * @return The value of the 'label' field.
   */
  public java.lang.Integer getLabel() {
    return label;
  }

  /**
   * Sets the value of the 'label' field.
   * @param value the value to set.
   */
  public void setLabel(java.lang.Integer value) {
    this.label = value;
  }

  /**
   * Creates a new DataModel RecordBuilder.
   * @return A new DataModel RecordBuilder
   */
  public static DataModel.Builder newBuilder() {
    return new DataModel.Builder();
  }

  /**
   * Creates a new DataModel RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new DataModel RecordBuilder
   */
  public static DataModel.Builder newBuilder(DataModel.Builder other) {
    return new DataModel.Builder(other);
  }

  /**
   * Creates a new DataModel RecordBuilder by copying an existing DataModel instance.
   * @param other The existing instance to copy.
   * @return A new DataModel RecordBuilder
   */
  public static DataModel.Builder newBuilder(DataModel other) {
    return new DataModel.Builder(other);
  }

  /**
   * RecordBuilder for DataModel instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<DataModel>
    implements org.apache.avro.data.RecordBuilder<DataModel> {

    private java.lang.CharSequence text;
    private java.lang.Boolean afterRelease;
    private java.lang.CharSequence version;
    private java.lang.Integer label;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(DataModel.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.text)) {
        this.text = data().deepCopy(fields()[0].schema(), other.text);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.afterRelease)) {
        this.afterRelease = data().deepCopy(fields()[1].schema(), other.afterRelease);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.version)) {
        this.version = data().deepCopy(fields()[2].schema(), other.version);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.label)) {
        this.label = data().deepCopy(fields()[3].schema(), other.label);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing DataModel instance
     * @param other The existing instance to copy.
     */
    private Builder(DataModel other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.text)) {
        this.text = data().deepCopy(fields()[0].schema(), other.text);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.afterRelease)) {
        this.afterRelease = data().deepCopy(fields()[1].schema(), other.afterRelease);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.version)) {
        this.version = data().deepCopy(fields()[2].schema(), other.version);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.label)) {
        this.label = data().deepCopy(fields()[3].schema(), other.label);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'text' field.
      * @return The value.
      */
    public java.lang.CharSequence getText() {
      return text;
    }

    /**
      * Sets the value of the 'text' field.
      * @param value The value of 'text'.
      * @return This builder.
      */
    public DataModel.Builder setText(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.text = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'text' field has been set.
      * @return True if the 'text' field has been set, false otherwise.
      */
    public boolean hasText() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'text' field.
      * @return This builder.
      */
    public DataModel.Builder clearText() {
      text = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'afterRelease' field.
      * @return The value.
      */
    public java.lang.Boolean getAfterRelease() {
      return afterRelease;
    }

    /**
      * Sets the value of the 'afterRelease' field.
      * @param value The value of 'afterRelease'.
      * @return This builder.
      */
    public DataModel.Builder setAfterRelease(java.lang.Boolean value) {
      validate(fields()[1], value);
      this.afterRelease = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'afterRelease' field has been set.
      * @return True if the 'afterRelease' field has been set, false otherwise.
      */
    public boolean hasAfterRelease() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'afterRelease' field.
      * @return This builder.
      */
    public DataModel.Builder clearAfterRelease() {
      afterRelease = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'version' field.
      * @return The value.
      */
    public java.lang.CharSequence getVersion() {
      return version;
    }

    /**
      * Sets the value of the 'version' field.
      * @param value The value of 'version'.
      * @return This builder.
      */
    public DataModel.Builder setVersion(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.version = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'version' field has been set.
      * @return True if the 'version' field has been set, false otherwise.
      */
    public boolean hasVersion() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'version' field.
      * @return This builder.
      */
    public DataModel.Builder clearVersion() {
      version = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'label' field.
      * @return The value.
      */
    public java.lang.Integer getLabel() {
      return label;
    }

    /**
      * Sets the value of the 'label' field.
      * @param value The value of 'label'.
      * @return This builder.
      */
    public DataModel.Builder setLabel(java.lang.Integer value) {
      validate(fields()[3], value);
      this.label = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'label' field has been set.
      * @return True if the 'label' field has been set, false otherwise.
      */
    public boolean hasLabel() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'label' field.
      * @return This builder.
      */
    public DataModel.Builder clearLabel() {
      label = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public DataModel build() {
      try {
        DataModel record = new DataModel();
        record.text = fieldSetFlags()[0] ? this.text : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.afterRelease = fieldSetFlags()[1] ? this.afterRelease : (java.lang.Boolean) defaultValue(fields()[1]);
        record.version = fieldSetFlags()[2] ? this.version : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.label = fieldSetFlags()[3] ? this.label : (java.lang.Integer) defaultValue(fields()[3]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<DataModel>
    WRITER$ = (org.apache.avro.io.DatumWriter<DataModel>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<DataModel>
    READER$ = (org.apache.avro.io.DatumReader<DataModel>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
